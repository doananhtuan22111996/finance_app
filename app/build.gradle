import java.util.regex.Matcher
import java.util.regex.Pattern

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
}

// Load keystore
def keystorePropertiesFileDev = rootProject.file("keystore.dev.properties")
def keystorePropertiesDev = new Properties()
keystorePropertiesDev.load(new FileInputStream(keystorePropertiesFileDev))

def keystorePropertiesFileProd = rootProject.file("keystore.prod.properties")
def keystorePropertiesProd = new Properties()
keystorePropertiesProd.load(new FileInputStream(keystorePropertiesFileProd))

def getCurrentFlavor = {
//    Gradle gradle = getGradle()
    String tskReqStr = gradle.getStartParameter().getTaskRequests().toString()

    Pattern pattern

    if (tskReqStr.contains("assemble")) pattern = Pattern.compile("assemble(\\w+)(Release|Debug)") else if (tskReqStr.contains("bundle")) pattern = Pattern.compile("bundle(\\w+)(Release|Debug)") else pattern = Pattern.compile("generate(\\w+)(Release|Debug)")

    println "Gradle task: ----->" + tskReqStr

    Matcher matcher = pattern.matcher(tskReqStr)

    if (matcher.find()) {
        println matcher.group(1).toLowerCase()
        return matcher.group(1).toLowerCase()
    } else {
        println "NO MATCH FOUND"
        return ""
    }
}

android {
    namespace "vn.finance.app"

    defaultConfig {
        applicationId "vn.finance.app"
        compileSdk versions.application.compileSdkVersion
        minSdkVersion versions.application.minSdkVersion
        targetSdkVersion versions.application.targetSdkVersion
        versionCode rootProject.hasProperty('versionCode') ? rootProject.versionCode.toInteger() : versions.application.versionCode
        versionName rootProject.hasProperty('versionName') ? rootProject.versionName : versions.application.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary = true
        }
    }

    signingConfigs {
        dev {
            storeFile file(keystorePropertiesDev['KEY_FILE'])
            storePassword keystorePropertiesDev['KEY_PASS']
            keyAlias keystorePropertiesDev['KEY_ALIAS']
            keyPassword keystorePropertiesDev['KEY_PASS']
        }
        prod {
            storeFile file(keystorePropertiesProd['KEY_FILE'])
            storePassword keystorePropertiesProd['KEY_PASS']
            keyAlias keystorePropertiesProd['KEY_ALIAS']
            keyPassword keystorePropertiesProd['KEY_PASS']
        }
    }

    buildTypes {
        debug {
            debuggable true
            shrinkResources false
            minifyEnabled false
            signingConfig getCurrentFlavor.toString() == 'prod' ? signingConfigs.prod : signingConfigs.dev
        }
        release {
            debuggable false
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig getCurrentFlavor.toString() == 'prod' ? signingConfigs.prod : signingConfigs.dev
        }
    }
    flavorDimensions += "environment"
    productFlavors {

        ext.loadConfig = { context ->
            Properties configProps = new Properties()
            println "productFlavors: ----->" + context.name
            configProps.load(project.rootProject.file("env.${context.name}.properties").newDataInputStream())
            context.applicationId configProps.getProperty("application.id")
            println "applicationId: ----->" + configProps.getProperty("application.id")
            context.manifestPlaceholders = [applicationName: configProps.getProperty("application.name")]
        }

        dev {
            dimension "environment"
            loadConfig(productFlavors.dev)
        }

        prod {
            dimension "environment"
            loadConfig(productFlavors.prod)
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        // Include plugin id 'kotlin-kapt' if enable dataBinding
        dataBinding true
        viewBinding true
        buildConfig = true
    }
}

dependencies {
    implementation 'androidx.activity:activity:1.8.0'
    testImplementation "junit:junit:${versions.test.junit}"
    androidTestImplementation "androidx.test.ext:junit:${versions.test.androidxJunit}"
    androidTestImplementation "androidx.test.espresso:espresso-core:${versions.test.espressoCore}"

    implementation project(path: ':domain')
    implementation project(path: ':data')

    // Image
    implementation "io.coil-kt:coil:${versions.resource.coil}"

    // AndroidX
    implementation "com.google.android.material:material:${versions.google.material}"
    implementation "androidx.constraintlayout:constraintlayout:${versions.androidX.constraintlayout}"
    implementation "androidx.core:core-splashscreen:${versions.androidX.splashScreen}"
    implementation "androidx.appcompat:appcompat:$versions.androidX.appcompat"

    implementation "androidx.navigation:navigation-fragment-ktx:${versions.androidX.navigation}"
    implementation "androidx.navigation:navigation-ui-ktx:${versions.androidX.navigation}"

    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:${versions.androidX.lifecycle}"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:${versions.androidX.lifecycle}"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:${versions.swipeLayout.swiperefreshlayout}"

    // Paging
    implementation "androidx.paging:paging-runtime-ktx:$versions.androidX.paging"

    implementation "com.google.code.gson:gson:${versions.google.gson}"
    implementation "org.jsoup:jsoup:${versions.anothers.jsoup}"

    implementation platform("com.google.firebase:firebase-bom:${versions.firebase.bom}")
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.google.firebase:firebase-crashlytics-ktx'

    // DI
    implementation("io.insert-koin:koin-android:$versions.di.koin")

    // debug
    implementation "com.jakewharton.timber:timber:${versions.debug.timber}"
}
